// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model LiveSession {
  id          String   @id @default(uuid()) @map("_id") // Certifique-se do uso de MongoDB se necessário
  title       String
  streamKey   String
  channelArn  String
  status      String   @default("active") // Campo para controlar o status da live
  createdAt   DateTime @default(now())
  endedAt     DateTime? // Campo opcional para registrar quando a live foi encerrada
}

model VerificationToken {
    id               String                  @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Account {
    id               String                  @id @default(auto()) @map("_id") @db.ObjectId
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String? @db.String
    access_token       String? @db.String
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.String
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

     user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id               String                  @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    expires      DateTime
     user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @map("user_id")

    @@index([userId])
}

model User {
    id                     String          @id @default(auto()) @map("_id") @db.ObjectId
    name                   String?     @unique
    password             String?  // Tornar opcional
    username               String?    @unique
    bio                    String?
    website                String?
    gender                 String?
    email                  String?         @unique
    emailVerified          DateTime?
    image                  String?
    createdAt              DateTime        @default(now()) @map("created_at")
    updatedAt              DateTime        @updatedAt @map("updated_at")
    stripeCustomerId       String?         @map("stripe_customer_id")
    stripeSubscriptionId   String?         @map("stripe_subscription_id") // removed `@unique`
    stripePriceId          String?         @map("stripe_price_id")
    stripeCurrentPeriodEnd DateTime?       @map("stripe_current_period_end")
    credits                Int             @default(0)
    role                   UserRole        @default(USER)

    verificationPurchased Boolean @default(false) // Campo para indicar a compra de verificação
   
    affiliate              AffiliateRole   @default(USER) // Campo de afiliado com tipo AffiliateRole
    postsThisMonth   Int             @default(0)     // Número de posts realizados no mês
    affiliateSales     AffiliateSales[] @relation("UserToAffiliateSales") // Relacionamento com AffiliateSales
    affiliateClients AffiliateClient[] @relation("AffiliateClients")

    callsHosted            Call[]          @relation("HostCall") // Relação com chamadas onde é anfitrião
    callMemberships        CallMember[]    // Relação com chamadas onde é membro
    invites                Invite[]        // Relação com convites recebidos

    job   String @default("USER") // Tipo String para Job

    payments           Payment[] // Relacionamento com o modelo Payment (um usuário pode ter múltiplos pagamentos)

    postsCount     Int      @default(0) // Contagem de posts como número
    reels          Int      @default(0)
    socialInteractions Int  @default(0)


    // Relationships
    posts         Post[]
    saved         SavedPost[]
    likes         Like[]
    comments      Comment[]
    followedBy    Follows[]   @relation("following")
    following     Follows[]   @relation("follower")
    accounts      Account[]
    sessions      Session[]
    isAdmin       Boolean     @default(false)
    affiliateLinks AffiliateLink[] @relation("UserAffiliateLinks")
    stories                Story[]         // Adicionando a relação com os Stories

    referralId   String?  @unique // Adiciona o campo referralId
    referrals    Referral[] @relation("UserReferrals")

  
    verifiedProfile  VerifiedProfile  @default(NOTVERIFIED)

    socials                Socials?        @relation("UserToSocials") // Relacionamento com a tabela Socials
    
    @@map("users")
}


enum UserRole {
  ADMIN
  USER
}

enum AffiliateRole {
  AFFILIATE
  USER
}

enum VerifiedProfile {
  VERIFIED
  NOTVERIFIED
}

enum JobRole {
  JOB
  USER
}

model Sale {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  productId      String   // ID do produto vendido
  affiliateCode  String   // Código do afiliado responsável pela venda
  customerEmail  String   // Email do cliente que comprou o produto
  amount         Int      // Valor total da venda em centavos (para compatibilidade com Stripe)
  createdAt      DateTime @default(now()) // Data de criação da venda

   product        Product  @relation("ProductSales", fields: [productId], references: [id]) // Relação com o produto
}



model Call {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String?      // Nome ou título da chamada
  members     CallMember[] // Relacionamento com membros via tabela intermediária
  invites     Invite[]     // Lista de convites relacionados à chamada
  hostId      String       // ID do anfitrião da chamada
  host        User         @relation(fields: [hostId], references: [id], onDelete: Cascade, name: "HostCall") // Relacionamento com o anfitrião

  @@index([hostId])
}

model Socials {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique
  indecent       String?
  whatsapp       String?
  instagram      String?
  tiktok         String?
  facebook       String?
  pinterest      String?
  twitter        String?
  youtube        String?
  onlyfans       String?
  privacySocial  String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user           User     @relation(fields: [userId], references: [id], name: "UserToSocials")
}


model CallMember {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  callId    String
  userId    String
  joinedAt  DateTime @default(now()) // Data de entrada na chamada

  call      Call   @relation(fields: [callId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([callId, userId]) // Garante que um usuário esteja apenas uma vez em uma chamada
  @@index([callId])
  @@index([userId])
}

model Invite {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  callId      String     // ID da chamada
  userId      String     // ID do usuário convidado
  status      String     @default("pending") // Status do convite (ex.: pending, accepted, rejected)
  createdAt   DateTime   @default(now())
  
  call        Call       @relation(fields: [callId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([userId])
  @@unique([callId, userId]) // Garante que um mesmo usuário não seja convidado duas vezes para a mesma chamada
}


model AffiliateLink {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    userId           String
    productId        String
    generated_link String
    createdAt        DateTime       @default(now())
    creditedAt       DateTime?
    creditsEarned    Int            @default(0)

    user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserAffiliateLinks")
    product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductLinks")
}

model AffiliateClient {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  affiliateId    String
  clientId       String
  createdAt      DateTime @default(now())
  lifetimeEarnings Float   @default(0)

  affiliate      User     @relation(fields: [affiliateId], references: [id], onDelete: Cascade, name: "AffiliateClients")
  //client         User     @relation(fields: [clientId], references: [id], onDelete: Cascade, name: "ClientReferrals")
}

model AffiliateSales {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   // ID do produto
  referrerId String   // ID do afiliado que indicou
  userId     String   // ID do usuário que comprou
  amount     Float    // Valor da compra
  createdAt  DateTime @default(now()) // Data e hora da criação

  // Relacionamentos (opcional, caso tenha tabelas relacionadas)
  product            Product  @relation("ProductToAffiliateSales", fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation("UserToAffiliateSales", fields: [userId], references: [id], onDelete: Cascade)
}

model Referral {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  referredBy  User     @relation("UserReferrals", fields: [referredById], references: [id])
  referredById String
  referredUserId String @unique
}


model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  categories    String[] 
  images        String[] // Array de URLs de imagens
  affiliateLink String
  createdAt     DateTime @default(now()) @db.Date
  updatedAt     DateTime @updatedAt @db.Date

  AffiliateLinks AffiliateLink[]  @relation("ProductLinks") // Campo de relação correspondente no lado do produto
  affiliateSales     AffiliateSales[] @relation("ProductToAffiliateSales")
  sales          Sale[]           @relation("ProductSales") // Relação com o modelo Sale
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  amount    Float
  txHash    String
  status    String
  date      DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}



model Follows {
    id               String  @id @default(auto()) @map("_id") @db.ObjectId
    follower         User    @relation("follower", fields: [followerId], references: [id])
    followerId       String
    following        User    @relation("following", fields: [followingId], references: [id])
    followingId      String

    @@index([followerId])
    @@index([followingId])
    @@unique([followerId, followingId])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  caption   String?
  fileUrls  String[]    // Lista de URLs das imagens no S3
  category  String   @default("free") // Níveis de acesso
  tags       String[] // Novo campo para tags
  likes     Like[]
  savedBy   SavedPost[]
  comments  Comment[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  likesCount  Int      @default(0) // Novo campo para curtidas totais (likes + manualLikes)
  mLikes Int      @default(0)  // Novo campo para curtidas manuais

  views      Int      @default(0) // Verifique se este campo existe

  @@index([userId])
}


model SavedPost {
    id               String                  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
    @@index([userId])
}

model Like {
    id               String                  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
    @@index([userId])
}

model Comment {
    id               String                  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    body      String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([postId])
    @@index([userId])
}

model Story {
  id               String                  @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt  DateTime
  thumbnailUrl String  // Altere para opcional
  videoUrl  String
  createdAt DateTime @default(now())
  saved     Boolean  @default(false)

  @@index([userId])
}


